<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2025/05/21/bilibili%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/"/>
      <url>/2025/05/21/bilibili%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/</url>
      
        <content type="html"><![CDATA[<p>从 Bilibili 分享<br>打开要分享的 B 站视频，点击下方的分享按钮：</p><p>B站分享界面<br>B站分享界面</p><p>Hexo 不支持别的方式，只能选择嵌入代码，点击复制，直接粘贴至 markdown 文件内任意位置即可。</p><p>CSS 配置<br>粘贴的代码一般是这样的：</p><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=112977336403920&bvid=BV11HpZeWE9y&cid=500001652752861&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>然而主题一般不会特意去设置 iframe 的样式，所以插入这个视频之后，只有一个小小的播放框。为了正常观赏，我们给 iframe 加上属性 class="video-box"，然后在对应的 CSS 文件中插入以下代码：<p>.article-entry iframe.video-box {<br>width: 100%;<br>aspect-ratio: 16 &#x2F; 9;<br>}<br>这样我们的视频就和内容等宽，并且是 16 &#x2F; 9 的常规视频比例了。</p><p>进一步定制视频参数<br>但现在的视频还是有问题，第一，它会自动播放；其二，默认是静音的。查了一通资料，解决起来也不难，基本上可以靠增加参数解决。</p><ol><li><p>是否自动播放<br>B站视频分享默认自动播放，这有点烦，在 src 尾部追加参数 &amp;autoplay&#x3D;0，即可关闭自动播放。反之，参数 &amp;autoplay&#x3D;1就是打开自动播放了。</p></li><li><p>是否静音<br>B站视频分享默认静音播放，这个默认播放策略有些自相矛盾，悄悄的进村，打枪的不要？在 src 尾部追加参数 &amp;muted&#x3D;0 即可打开声音。同样的，&amp;muted&#x3D;1 就是静音了。</p></li><li><p>指定时间点播放<br>我们还可以指定视频开始的时间点，跳过不必要的片头，比如小朋友的贝斯演奏，实际的开始时间在25秒，我们可以追加参数 &amp;t&#x3D;25，让视频播放时直接跳到这个地方。</p></li></ol><p>最后我们的播放代码就变成了：</p><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=112977336403920&bvid=BV11HpZeWE9y&cid=500001652752861&p=1&autoplay=0&muted=0&t=25" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" class="video-box"></iframe>完美。]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>今年前端开发行业的就业行情如何呢？</title>
      <link href="/2025/05/13/%E4%BB%8A%E5%B9%B4%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A1%8C%E4%B8%9A%E7%9A%84%E5%B0%B1%E4%B8%9A%E8%A1%8C%E6%83%85%E5%A6%82%E4%BD%95%E5%91%A2%EF%BC%9F/"/>
      <url>/2025/05/13/%E4%BB%8A%E5%B9%B4%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A1%8C%E4%B8%9A%E7%9A%84%E5%B0%B1%E4%B8%9A%E8%A1%8C%E6%83%85%E5%A6%82%E4%BD%95%E5%91%A2%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>当前前端就业市场呈现 <strong>“技术深度定生死，全栈能力决高低”</strong> 的态势。 React&#x2F;Vue 仍为核心需求，但Next.js&#x2F;Nuxt等全栈框架、Electron&#x2F;Flutter跨端技术成竞争加分项。 大厂缩编倒逼开发者转型：B端可视化、低代码平台、WebGL&#x2F;3D引擎等细分领域需求上涨，AI工程化（大模型前端应用）成新风口。</p><div class="video-container"><iframe width="560" height="315" src="https://www.youtube.com/embed/WJk765ztHUg?si=rn7Vru_8YEnjKGiN" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe></div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      <categories>
          
          <category> 学习交流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试必问八股文，刷完通过率超99%</title>
      <link href="/2025/05/13/%E9%9D%A2%E8%AF%95%E5%BF%85%E9%97%AE%EF%BC%8C%E5%88%B7%E5%AE%8C%E5%B0%B1%E8%83%BD%E9%80%9A%E8%BF%87/"/>
      <url>/2025/05/13/%E9%9D%A2%E8%AF%95%E5%BF%85%E9%97%AE%EF%BC%8C%E5%88%B7%E5%AE%8C%E5%B0%B1%E8%83%BD%E9%80%9A%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="文章名字"><a href="#文章名字" class="headerlink" title="文章名字"></a>文章名字</h1><h2 id="文章标题"><a href="#文章标题" class="headerlink" title="文章标题"></a>文章标题</h2><h3 id="文章副标题"><a href="#文章副标题" class="headerlink" title="文章副标题"></a>文章副标题</h3><p>2025年，前端面试必问八股文，刷完通过率超99%<br>码农百科<br>码农百科<br>为大家整理各种程序猿资料，分享各种经验<br>标题可能夸大或与内容不符<br>2 人赞同了该文章<br>今年的金三银四已经过完，但前端面试竞争还是很强的。如何在激烈的竞争中脱颖而出？本文将从高频面试题型分析、核心知识框架梳理到备考策略，为你提供一份全面的面试指南。【需要八股文，或者更多前端zi料，请看文末】</p><p>一、前端面试概况</p><ol><li>竞争现状分析</li></ol><p>岗位需求：大厂HC收缩，中小厂更注重“即战力”，对项目经验和工程能力要求更高。<br>考察趋势：从“框架熟练度”转向“底层原理与工程化思维”，综合能力成为核心指标。<br>2. 常见考察方向</p><p>基础能力：JavaScript 核心原理、浏览器机制、网络协议。<br>框架与生态：React&#x2F;Vue 深度原理、状态管理、性能优化。<br>工程化：Webpack&#x2F;Vite 配置、CI&#x2F;CD、代码规范。<br>算法与数据结构：LeetCode 中等难度题目（如链表、二叉树、动态规划）。<br>项目设计：架构设计、难点突破、技术选型逻辑。</p><p>二、重点题型解析与高频考点</p><ol><li>JavaScript 核心</li></ol><p>高频题型：</p><p>闭包与作用域：结合代码分析变量生命周期，如循环中var与let的区别。<br>for (var i &#x3D; 0; i &lt; 3; i++) { setTimeout(() &#x3D;&gt; console.log(i), 100); &#x2F;&#x2F; 输出3次3 } &#x2F;&#x2F; 如何修改为输出0,1,2？考察闭包或块级作用域。<br>原型与继承：手写new关键字、实现类继承（ES5与ES6对比）。<br>异步编程：Promise 链式调用、async&#x2F;await 错误处理、事件循环（微任务与宏任务顺序）。<br>加分项：V8引擎优化机制（如隐藏类、内联缓存）、内存泄漏场景分析。</p><ol start="2"><li>框架原理（以React为例）</li></ol><p>核心考点：</p><p>虚拟DOM与Diff算法：Key的作用、双端对比策略。<br>Hooks原理：闭包陷阱、useEffect依赖项优化、自定义Hooks设计。<br>状态管理：Redux单向数据流、Mobx响应式原理、Context API适用场景。<br>常见问题：</p><p>“React性能优化手段有哪些？”（答案方向：memo、useCallback、懒加载、时间分片）<br>“Vue3的Composition API与React Hooks的异同？”</p><ol start="3"><li>浏览器与网络</li></ol><p>必考知识点：</p><p>渲染机制：关键渲染路径优化、重排与重绘（如何减少？）。<br>事件循环：宏任务（setTimeout）与微任务（Promise）执行顺序。<br>HTTP&#x2F;HTTPS：缓存策略（强缓存与协商缓存）、HTTPS握手过程。<br>安全：XSS与CSRF防御方案、CORS限制与解决方案。<br>进阶问题：</p><p>“从输入URL到页面展示发生了什么？”（需涵盖DNS解析、TCP握手、资源加载等全链路）<br>4. 前端工程化</p><p>高频考点：</p><p>Webpack：Loader与Plugin区别、Tree Shaking原理、代码分割配置。<br>性能优化：Lighthouse指标分析、首屏加载时间优化（SSR、预渲染）。<br>监控体系：错误监控（SourceMap还原）、性能埋点方案。<br>实战问题：</p><p>“如何实现一个Webpack Plugin？”（需理解Tapable钩子机制）</p><ol start="5"><li>算法与数据结构</li></ol><p>重点题型：</p><p>数组与字符串：两数之和、最长无重复子串。<br>链表：反转链表、环形链表检测。<br>二叉树：层序遍历、最近公共祖先。<br>动态规划：爬楼梯、背包问题。<br>Tips：大厂常要求手写代码，需熟练使用JavaScript处理边界条件（如NaN判断、大数运算）。</p><p>三、高效备战策略</p><ol><li>知识体系化</li></ol><p>建立脑图：按模块整理知识树（如JavaScript、框架、浏览器等），查漏补缺。<br>原理溯源：阅读源码（如React Fiber架构）或技术博客（如MDN、Web Fundamentals）。<br>2. 刷题与模拟</p><p>LeetCode：每日1~2题，优先掌握高频题（Top 100）。<br>模拟面试：使用工具（如Pramp）或找同伴进行限时实战，训练表达逻辑。<br>3. 项目复盘</p><p>STAR法则：梳理项目中遇到的难点（Situation）、解决方案（Action）、结果（Result）。<br>设计反思：针对技术选型（如为什么用Vue而不是React？）准备合理解释。<br>四、结语</p><p>前端面试不仅是为了有更好的平台，更是对前端开发者技术深度的检验。面试的核心在于将知识转化为解决问题的能力，而非机械背诵。建议保持“每日精进+定期复盘”的节奏，同时注重沟通表达的逻辑性。最后，记住：基础扎实者得天下，祝每位开发者都能斩获心仪的Offer！【点此获取更多】</p><p>拓展思考：面试不仅是求职，更是技术视野的拓展。即使未换岗，定期参与面试也能帮助你跳出舒适区，保持技术敏感度。</p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      <categories>
          
          <category> 学习交流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端就业前景分析</title>
      <link href="/2025/05/13/Web%E5%89%8D%E7%AB%AF%E5%B0%B1%E4%B8%9A%E5%89%8D%E6%99%AF%E5%88%86%E6%9E%90/"/>
      <url>/2025/05/13/Web%E5%89%8D%E7%AB%AF%E5%B0%B1%E4%B8%9A%E5%89%8D%E6%99%AF%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>最近看到很多人发帖询问web前端的就业前景如何，还能找到工作吗？还有部分来吐槽前端学出来几个月都找不到工作，工资要个三四千都没有公司要等等情况。这是很多行业都会面临的一个问题，一个职业存在时间越久，他的需求就会慢慢变低，竞争压力更大；这种情况在传统行业最常见，学的人多了，要求就高了，找工作甚至实习都需要找关系找人脉。</p><p>以前可能你只要会前端的基本技能，就能随随便便找到一份高薪工作；现在是你不仅要专业技能掌握好，好要学历高，有工作经验，会更多的技能等。有上进心的人会选择进一步的学习提升技能，比如报个班培训一下前端。这点本人是不认同的，前端本身就业已经很困难了，如果你选择培训，那还不如选择培训个技术含量更高的，你出来就业机会还更多，或者你可以更轻松的向下兼容前端职位。</p><p>不要被培训机构的花言巧语迷惑，他们只会说前端的好，却不告诉你现在前端的就业大环境是怎么样的，也不会告诉你他们自己的学员都找不到工作或者工资很低。今天就从我自己了解到的前端的一些就业情况做一些分享，希望能帮到对这方面不了解迷茫的小伙伴们！</p><p>Web前端就业现状：</p><p>目前一线城市，本科以下无经验者没有任何面试邀请。</p><p>二线城市，专科以下无经验者收不到面试邀请。视个人水平而定，4k以上的工作大概就要对语言理解的较为深入了。水平不行的，1~2k也不少见。</p><p>三线城市，一般稍有规模的互联网公司都不会在这。不排除能找到工作的可能。但与之相对，工资并不会太高。一两千也并不少见。</p><p>不知道大家有没有关注到一个新闻，鹅厂知名前端第一人被辞职了，是因为技术不行的原因吗？肯定不是，所以就算你技术也还不错，没有市场需求，也是会因为其他方面与公司不合而被辞退。对于这些大牛而言，辞退并不是终点，他有经济积累，可以另起炉灶或者干点其他的，这些不是我等该操心的事。</p><p>面对人才饱和的现状，技术大牛尚且不会被珍惜；如果你只是普通的一般人，那么你有什么竞争力呢？</p><p>Web前端竞争激烈原因分析</p><p>1、市场需求减少，用人单位大面积裁员。</p><p>从疫情开始，互联网企业的裁员就开始显现，虽然以前也有裁员，但是招聘是紧随其后的，只是单纯的换血；疫情之下，企业经济萎缩，直接砍掉不必要的项目，裁掉非核心职位，web前端就是其中之一。</p><p>其实早在疫情前，web前端的招聘需求已经在连年下降。一个企业中，每个项目都有自己的后端开发，但是一个前端对接所有的项目，前端职位需求是很少的；前端学习难度不高，近年来学习的人非常多，供过于求，导致岗位接近饱和。</p><p>招聘网站最新web前端岗位需求走势：2022年岗位需求比2021年下降45%，2023年最新岗位需求比2022年下降了58%。</p><p>作为企业来说，想要在经济下行的环境下生存下去，肯定是要尽可能的砍掉不必要的开支，保留核心技术岗位。那么IT企业的核心是什么呢？是后端开发，比如常说的Java开发技术人才。而前端、测试一类的职位是属于非核心岗位，那么在考虑成本时，就成了首先被考虑缩减的岗位。可能职位不会被全部裁掉，但是也有像马斯克一样砍掉全部人员的情况，这种就是比较疯狂的举动，但是一般的企业首先也会考虑非核心岗位的淘汰制度。在未来，这种制定还会被延续下去，节约的部分用在更有价值的地方，比如招聘优秀的后端开发，发展云服务等。</p><p>2、前端职业存在可替代的后端开发人才，全栈人才更有利于企业节约成本</p><p>前端与后端技术内容对比：</p><p>Web前端：</p><p>前端主要是面向网页的开发，静态页面、动态页面等技术内容，整体的技术内容覆盖范围较为单一，需要掌握的并不多。</p><p>具体的学习内容：</p><p>网页三剑客的HTML、CSS、JavaScript。HTML+CSS针对的是静态页面，这部分内容没有多大难度，也没有任何的逻辑性难度，只要多练多看，这部分内容就是熟能生巧的事情。JavaScript学完可以让静态页面动起来，这部分也是前端的核心技术了，相对前面的部分学习难度高一些。</p><p>网页框架：前端目前主要就react、Vue两个主流的框架技术，这部分学完，前端的内容就结束了。</p><p>前端的整个学习过程都是使用编码器进行学习练习，有自动提示填充内容。对于零基础来说是易学专业，选择的人也非常多，竞争优势不强；如果在学历，技术深度上没有突出的表现，在当下的就业环境下基本无法就业。</p><p>Java后端：</p><p>后端开发是企业的核心岗位，是整个项目中不可获取的技术。后端主要还是面向整个软件业务的核心功能部分，整体的技术内容丰富多样，不仅要学习前端的内容，也要学习后端框架、企业级应用、以及分布式微服务、大数据开发等技术内容。</p><p>具体学习内容：</p><p>JavaSE阶段：本阶段主要是学习Java基础语言、面向对象编程。重点是培养编程思维，打好后端开发的基础。</p><p>Java web开发：这部分就是学习web前端的内容，网页技术+框架技术的所有内容都要学习，包括ajax、Git等等。</p><p>Java框架：针对Java EE平台的企业级开发框架学习，学完不仅能够做网页网站，还可以开发企业级的应用、软件系统、游戏等。</p><p>分布式微服务：分布式微服务框架（Spring boot等）是近年来Java方向新的技术内容，也是主流的框架技术之一。掌握了这部分的技术，市面上常见的前端后端开发工作都可以胜任。</p><p>大数据开发：主要是顺应大数据的发展，拓展了开发边界，需要学习Docker容器、K8S等技术，可以向大数据开发岗位发展。</p><p>所以，Java后端整体的课程内容比前端更丰富，技术含量更高；学Java的不仅会后端，还会前端，学前端的就只会前端，想做后端，就还要继续学。</p><p>全栈工程师更受企业欢迎：</p><p>对于企业来说，用更少的资源获得最大的利益是一直不变的追求。现在的就业市场是企业占据主导地位，尤其是发展饱和的一些技术领域，比如web前端，由于学习的门槛不高，早几年前学习的人非常多，不管是院校生还是培训生；但是企业招聘的数量是有限的，相比后端而言，招聘比例非常低。一个企业可以一直招聘后端这种核心岗位，但是前端有人数限定，并且招聘要求会随着求职者的增加不断提升。</p><p>前端学成后基本只能做前端的工作，连测试的工作都不一定能做，还需要对用户需求、行业走势、新的技术及时了解掌握，并用于前端设计中，对于年龄的要求、求知欲、敏感性要求比较高。是一个夹在产品经理和后端中间的岗位，前后受气，地位不高，除非你做成了前端专家；但做到了这个职位的人都是学过了后端知识，在工作中不断优化自己的技能。</p><p>而相对的后端开发，学成之后不仅可以从事后端工作，也可以从事web前端、软件测试等技术工作；对于企业来说，这类全栈人才更有吸引力，能更大程度上为公司节约成本；并且后端的技术和经验丰富，专门做前端也可以有更多的贡献，与后端人员工作协作也会更顺利。</p><p>IT项目有个怪相，产品经理说前端设计不符合用户需求，后端说前端不懂技术，然后开始相互争吵，最终受气的都是中间的老二。又由于业务形态的要求，有的领域前后端比达到了1:10，1个前端对接10个后端，企业的核心岗位体现得淋漓尽致。</p><p>学Java后端开发必须要掌握前端知识。</p><p>职业发展方向：</p><p>Web前端：</p><p>Web前端：前端开发工程师——资深前端工程师——前端专家</p><p>前端开发工程师——技术经理——技术总监</p><p>Java后端：</p><p>Java开发工程师——高级开发工程师——架构师CTO</p><p>Java开发工程师——技术经理——技术总监——CTO</p><p>向下兼容：前端开发工程师、测试工程师</p><p>在传统互联网企业中，或者其他行业中，核心技术岗位始终都是被优先考虑晋升管理岗位的。所以做后端开发更容易或者管理职位的提升，如果你的兴趣是在这方面的话。前端也有管理晋升，不过如果达到整个项目组领导层的往往是核心技术人员；而一旦选择了前端入行后，在实际的工作中很难坚持学习，更别说学习后端的知识，一旦到了年龄就很容易被优胜劣汰，被更年轻的人才替代。</p><p>前端岗位招聘现状：对于学历、工作经验的要求越来越高</p><p>前端就业市场趋于成熟，对于学历、工作经验的要求、技术的要求基本已经形成了完整的生态系统。学历一般都是本科及以上，大一点的公司要求重点本科；</p><p>专业计算机或相关专业；</p><p>工作经验一般要求2—3年；</p><p>技能方面：前端的技术框架都要熟练，最好有实际的项目案例等等。</p><p>优先条件：掌握一门后端语言。</p><p>IT行业越来越卷是现状也是趋势，行业整体的技术要求都在提升，不只是前端，后端也是如此。那么就会导致更多的后端会迫于后端岗位的强大竞争转而向前端岗位渗透，面对这样的降维打击，那么单纯的前端又有什么竞争力呢？企业是愿意招聘一个只会前端的，还是招聘一个会前端又会后端的人才呢？答案显而易见的。</p><p>根据IDC的统计数字，在所有软件开发类人才的需求中，对Java工程师的需求达到全部需求量的50%以上。更多的年轻人会选择学Java，不仅是因为招聘需求，也是因为可以选择的职业和领域更多，比如人工智能、大数据、云计算、新能源、电子芯片等等新经济领域都有Java后端开发的岗位需求。</p>]]></content>
      
      
      <categories>
          
          <category> 学习交流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开通博客的初衷</title>
      <link href="/2025/05/13/%E5%BC%80%E9%80%9A%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%88%9D%E8%A1%B7/"/>
      <url>/2025/05/13/%E5%BC%80%E9%80%9A%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%88%9D%E8%A1%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在经过长时间的摸索、实践、碰壁之后，我重新回到码农的行列，岁月蹉跎而前路漫漫，记录下这一过程中的得失既可以让自己温故知新避免重蹈覆辙，也可以抛砖引玉，警示他人。</p><h2 id="何方码农"><a href="#何方码农" class="headerlink" title="何方码农"></a>何方码农</h2><p>计算机技术发展是日新月异，软件、硬件、系统、工具等等，无论是哪一方面，都能让人穷尽一生也难窥全貌，而人的时间、精力都是有限的，只能专注于其一，所以如何取舍是必须慎之又慎的问题。</p><p>人之于世，家里倘若没有万贯家财，自当奋发图强，自力更生，这是谋生；而现实社会却又是纷繁浩杂，多姿多彩，让你沉迷，这是爱好。倘若自己的工作恰恰是自己的爱好，那你的每一天都是美妙的。既然选择当码农以谋生，在哪一方面去努力呢？</p><p>硬件方面，要想有所成就，需要涉足硬件的结构、组成、制造，对电子、电路技术要有基础、还要熟悉机械、材料方面的知识。目前热门的芯片制造及芯片制造设备、AI设备制造等等，这些都是系统工程，需要多门类知识人员、设备结合在一起，需要一个团队。</p><p>软件方面，系统方面的，比如各种电脑、手机操作系统，应用方面的则已经现实生活中的方方面面。我选择做一个全栈的码农，是因为各种应用的基础知识就是前后端的数据交互和显示。</p><p>前端最基础的知识：HTML CSS Javascript，前端要能写出网页展示，要求对版面设计、图形图像处理有了解，掌握主流框架。</p><p>后端最基础的知识：了解http、smtp、ftp协议及工作原理，要能处理前端请求，要求对数据库、云计算云存储有了解，根据系统需求确定系统架构。</p><h2 id="善于学习"><a href="#善于学习" class="headerlink" title="善于学习"></a>善于学习</h2><p>互联网高度发达，能做很多你想不到的事情，所以学习中更要充分利用好互联网。但网络上的信息太多了，既有熠熠星徽，也有污浊泥沙，要去芜存精需要的不仅仅是慧眼，还有无数次的试错。先有教训后有经验，把过程记录下来，是学习过程中最重要的一步。</p><h2 id="欢迎交流"><a href="#欢迎交流" class="headerlink" title="欢迎交流"></a>欢迎交流</h2><p>除了工作，还有生活，欢迎交流。</p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      <categories>
          
          <category> 学习交流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交流 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
